Project 1: Threads

---- GOALS ----

In this assignment, we give you a minimally functional thread system. Your job is to extend the functionality of this system to gain a better understanding of synchronization problems.

---- PRELIMINARIES ----



                    ALARM CLOCK
                    ===========

---- DATA STRUCTURES ----

   /* sleep_list is to keep sleeping threads */
   struct list sleep_list;


Added to struct thread:
   
   /* Members to calculate the remaining time for the thread to wake up */
   int64_t start;                      /* Start sleeping time */
   int64_t ticks;                      /* Total sleeping time */


---- ALGORITHMS ----

The implementation consists of two parts: sleep and wake_up

For the sleep part, in timer_sleep(int64_t ticks), we check whether a thread has to be put into sleep. If so, push it onto the back of sleep_list and block it; 

Since thread_tick() is invoked by the interrupt handler every tick, we could add our wake_up part codes there. Thus, no threads will sleep over. Whatever the thread is running, it goes from the head of the sleep_list to the end to compare one's remaining time against 0. Any thread has slept enough time is removed and unblocked.

Remark that list_remove will return the next elem so we shouldn't call the next elem explicitly.

---- SYNCHRONIZATION ----

Although the comment says 

   struct list_elem elem;

is shared between thread.c and synch.c, it is generally shared between a ready list and waiting list. Thus, we could use it to wait(or rather, sleep) in our sleep_list.

---- RATIONALE ----

The implementation is simple and straight-forward. thread_block and thread_unblock are used instead of any synchronization primitives. We need to disable interrupt before invoking thread_block and re-enable it afterwards. This doesn't seem to have caused any trouble.



                      PRIORITY SCHEDULING
                      ===================

Generally, when a list is added to the ready list, or when it has to wait for a lock, a semaphore, or condition variable and thus is added to a waiting list, we invoke list_insert_ordered to keep the list in priority order.

But we need to implement priority donation to deal with priority inversion.


---- DATA STRUCTURES ----
             
Added to struct thread:

   /* Members to implement priority donation */
   int donee_prio;                     /* Doner keeps priority of donee */
   int old_priority;                   /* Priority when the thread is created */
   int lock_num;                       /* Number of locks the thread is holding */
   struct thread *donee;               
   struct list *waiters;               /* Waiting list the thread is in */

Added to struct lock:

   bool donated;                       /* Whether donation happens on the lock */
   struct thread *doner;               /* If donation happens, record the doner */


---- ALGORITHMS ----

Priority inversion happens when a thread is trying to acquire a lock held by another thread with a smaller priority. Thus, that's where priority donation should come in. It is accomplished in two phases. The first phase is in lock_acquire that's where donation takes place. The second phase is in lock_release where the priority of donee should be recovered in a proper way.

#lock_acquire:

Only the first doner record the info of donee when multiple doners wait on the same thread. 

Since priority donation changes a thread's priority, we need to relocate it in its list(ready_list or wait_list, remember we keep a member waiters to decide it). Furthermore, this is done recursively to handle nested donation. 

#lock_release:

Of course, we only need to recover donee's priority when donation has happened(that's why we have the marker donated in struct lock). We take two conditions into account here.

In the first case, if the donee(current thread) has just acquired one lock, then its priority is recovered from its old_priority member. Otherwise(recovered from doner's donee_prio member), threads with priorities between its old_priority and the highest priority may not get a chance to run. Let's take an example to illustrate it. 

       Suppose we have three threads L, M and H with priorities 31, 32 and 33 respectively and L has acquired a lock. 
       When M is trying to acquire that lock, it donates its priority to L and record L' priority(now L's priority is 32, M's donee_prio is 31). Then H comes and does the same thing(then L's priority is 33, H's donee_prio is 32).
       Now, L has got a chance to run and release the lock. If it recovers its priority from H's donee_prio, its priority would be 32, the same as M! Will M get a chance to run? Probably no. Hence, the proper decision here is recovered from L's old_priority(31). Now, all the threads would be happy.

In the second case, if the donee has acquired more than one locks, then its priority is recovered from doner's donee_prio member. This is because the donee's task hasn't been finished, and we want it to go on to release other locks. Also, we make a scenario here.

       Suppose we have three threads L, M, H and X with priorities 31, 33, 34 and 32 respectively and L has acquired two locks A and B.
       M comes to acquire lock A and H comes to acquire lock B. L is left with priority 34 with M's donee_prio 31 and H's donee_prio 33. 
       Firstly, L releases lock A. If its priority is recovered from its old_priority member(31). Then it will never have a chance to run because of X(32). So it is recovered from H's donee_prio member(33) and L moves on to release lock B.
       What if L releases lock B first? Then in either way, L's priority would be 31, and has no chance to release lock A. We really can't help here.



